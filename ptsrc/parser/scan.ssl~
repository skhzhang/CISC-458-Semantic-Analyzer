% PT Scanner.ssl   Ver. 1.03
%
% Date:  30 Jun 1980
%	 (revised 22 Jan 2002)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%   It removes token separators - blanks, tabs, comments.  The
%   scanner detects these lexical errors:  unclosed comments,
%   unclosed literals, literals that cross a line boundary,
%   illegal characters and integers followed by identifiers with no
%   separator between them.

Input :
	lLetter 
	firstCharClass = lLetter 
	lDigit
	lPlus		'+'
	lMinus		'-'
	lStar		'*'
	lColon		':'
	lEquals		'='
	lDot		'.'
	lComma		','
	lSemicolon	';'
	lQuote		'"' % uses double quotes now from blank
	lLeftAngle	'<'
	lRightAngle	'>'
	lLeftParen	'('
	lRightParen	')'
	lLeftBracket	'['
	lRightBracket	']'
	lLeftBrace	'{'
	lRightBrace	'}'
	lBlank
	lIllegal
	lNewLine
	lTab
	lNewPage 
	lEndFile
	lSlash		'/' % added input token and symbol for forward slash character
	lHash		'#' % added input token and symbol for hash character
	lExclam		'!' % added input token and symbol for exclamation character
	lAt		'@' % added input token and symbol for at character
	lastCharClass = lAt;

Output :
	% Keyword tokens -
	%   Tokens pDiv through pRepeat are keywords which will be separated
	%   from user defined identifiers by the Screener.  This Scanner
	%   treats them all as identifiers.
	pDiv 
	firstKeywordToken = pDiv
	pMod
	pOr
	pAnd
	pNot
	% pThen, removed old keyword
	pElse
	pOf
	% pEnd, removed old keyword 
	% pUntil, removed old keyword
	% pDo, removed old keyword
	pArray
	pFile
	pPacked
	pProgram
	% pConst, removed old keyword.
	pVar
	pType
	% pProcedure removed old keyword
	% pBegin removed old keyword
	pIf
	pCase
	% pWhile, removed old keyword
	% pRepeat, removed old keyword

	% Add new tokens here
	pLet % added a new token for keyword let
	pFunction % added a new token for keyword function
	pSwitch % added a new token for keyword switch
	pDefault % added a new token for keyword default
	pElseif % added a new token for keyword elseif
	pLoop % added a new token for keyword loop
	pBreak % added a new token for keyword break
	pWhen % added a new token for keyword when
	pClass % added a new token for keyword class
	pPublic % added a new token for keyword public
	lastKeywordToken = pPublic  % changed since pRepeat has been removed.

	% Scanner tokens -
	%   These are the tokens actually recognized by the Scanner itself.

	% Compound tokens - 
	%   These will be sent to the parser with a value or index.
	pIdentifier 
	firstCompoundInputToken = pIdentifier
	pInteger
	pLiteral
	lastCompoundInputToken = pLiteral

	% Non-compound tokens - 
	%   These tokens simply represent themselves.
	pNewLine
	pEndFile
	pPlus
	pMinus
	pStar
	pColonEquals
	pDot
	pComma
	pSemicolon
	pColon
	pEquals
	pNotEqual
	pLess
	pLessEqual
	pGreaterEqual
	pGreater
	pLeftParen
	pRightParen
	pLeftBracket
	pRightBracket
	pLeftBrace % added new token for left bracelet
	pRightBrace % added new token for right bracelet
	pDotDot
	pSlash % added new output token for forward slash character
	pHash % added new output token for hash character
	pExclam % added new output token for exclamation character
	pAt % added new output token for at character
	pDoubleEq % added new output token for double equals symbols
	lastSyntaxToken = pDoubleEq;

Error :
	eIllegalChar = 5
	firstScanError = eIllegalChar
	eLiteralLine
	eLiteralEOF
	eCommentEOF
	eNoSeparator
	lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
	% Save the character form of the last accepted lexical token.




rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan :
	{[
	    | lBlank :
	    | lLetter:
		oBufferSave
		@Identifier
	    | lNewLine:
		.pNewLine
	    | lTab:
	    | ';':
		.pSemicolon
	    | '/': % added slash
		[
		    | '*':
			@Comment
		    | '/':
			@LineComment
		    | *:
			#eIllegalChar
		]
	    | '(': % removed comment functionality
		.pLeftParen
	    | ')':
		.pRightParen
	    | '[':
		.pLeftBracket
	    | ']':
		.pRightBracket
	    | ',':
		.pComma
	    | ':':
		[
		    | '=':
			.pColonEquals
		    | *:
			.pColon
		]
	    | lDigit:
		oBufferSave
		@Integer
		[
		    | lLetter:
			#eNoSeparator
			oBufferSave
			@Identifier
		    | *:
		]
	    | '=': % added functionality for a double equals token emission for a pair of equals
		[
		    | '=':
			.pDoubleEq
		    | *:
			.pEquals
		]
	    | '+':
		.pPlus
	    | '"':  % change to " from lQuote
		@Literal
	    | '-':
		.pMinus
	    | '.':
		[
		    | '.':
			.pDotDot
		    | *:
			.pDot
		]
	    | '<':
		[
		    | '>':
			.pNotEqual
		    | '=':
			.pLessEqual
		    | *:
			.pLess
		]
	    | '>':
		[
		    | '=':
			.pGreaterEqual
		    | *:
			.pGreater
		]
	    | '!': 
		[
		    | '=':
			.pNotEqual
		    | *:
			.pExclam
		]
	    | '*':
		.pStar
	    | '{': % remove alt comment functionality of {
		.pLeftBrace
	    | '}':
		.pRightBrace
	    | lNewPage:
	    | lIllegal:
		#eIllegalChar
	    | lEndFile:
		.pEndFile
	]};

Identifier :
	% Assemble an identifier token

	{[
	    | lLetter, lDigit:
		oBufferSave
	    | *:
		.pIdentifier
		>
	]};

Integer :
	% Assemble an integer token

	{[
	    | lDigit:
		oBufferSave
	    | *:
		.pInteger
		>
	]};

Literal :
	% Assemble a literal string token

	{[
	    | '"':    % change to double quote from lQuote
		[
		    | '"':  % change to double quote from lQuote
			oBufferSave
		    | *:
			.pLiteral
			>
		]
	    | lNewLine:		% literal must not cross a line boundary
		#eLiteralLine
		.pNewLine
		>
	    | lEndFile:		% literal must be closed before EOF
		#eLiteralEOF
		.pEndFile
		>
	    | *:	% literal may contain any other character
		?
		oBufferSave
	]};

% change from } to */
Comment :
	% Discard the contents of a comment

	{[
	    | '*':
		[
		    | '/':
			>
		    | *:
		]
	    | lNewLine:
		.pNewLine
	    | lEndFile:		% comment must be closed before EOF
		#eCommentEOF
		.pEndFile
		>
	    | *:	% comment may contain any other character
		?
	]};

% removed AlternateComment and change to LineComment
LineComment :
	% Discard the contents of a comment

	{[
	    | lNewLine:
		.pNewLine
		>
	    | lEndFile:		% comment must be closed before EOF
		>
	    | *:	% comment may contain any other character
		?
	]};

end
